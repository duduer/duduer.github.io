<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sql]]></title>
    <url>%2F2019%2F02%2F13%2Fsql%2F</url>
    <content type="text"><![CDATA[Sql基础语法 获取数据 12select from atable as a (inner) join where (select * from)and (order by) desc]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell复习-1 基础内容]]></title>
    <url>%2F2019%2F01%2F22%2Fshell-1%2F</url>
    <content type="text"><![CDATA[bash,csh,sh等bash解释器区别 sh(Bourne shell),最老的shell，也是最基础的 bash(Bourne Again Shell),Linux 默认，shell的扩展版本，包含部分csh和ksh的特性 csh，语法和c比较类似 tsch，c shell的扩展版本，支持补全，校正等便捷操作-ksh(korn shell),结合csh和bash特点兼容bash bash基础相关 输入相关` &lt; filename(文本输入) &lt;&lt; stop(持续输入知道遇到stop) read param(接受控制台读取一个参数) 0 (标准输入描述符) ` 输出相关`&gt; filename(文本输出,覆盖) &gt;&gt; filename(追加到文本文件) 2&gt;&amp;1(把错误输出重定向到标准输出)：find xx &gt; test.log 2&gt;&amp;1 1 (标准输出描述符) 2 (错误输出描述符) ` 变量 可以通过下面知道$ # @ * 这些符号含义在变量中基本是一致的1) 普通变量`var=xx|var=&quot;xx&quot; (赋值) $var|${var}|&quot;$var&quot; (注意单引号会使得$无效,${}可以作为正则表达式) $* $@ $# #? (* 表示所有参数取值,视为一个参数五区段。 @还存在着区段，#为参数数量,?为上个脚本执行结果) $0|$1···(0表示脚本自己，1等表示参数下标,两位书以上需要用{}) ( ) (类似 · · 和 eval,执行群组指令获取结果，但是()也可用于数组定义) (( )) (类似let，bash内建指令，算术计算) { } (单纯只使用大括号时，作用就像是个没有指定名称的函数一般,另一种用法常用在字串的组合 mkdir {userA,userB,userC}-{home,bin,data}会创建两个大括号的正交组合的目录 ) [ ] (判断内容，类似test，[ $a -eq $b ],数值 -eq -ne -lt -le -gt -ge,文件 -r -l -w -x -f -e -d -s -nt -ot,字符 = ！= -n -z ,逻辑 -a -o !) [[ ]] (判断，可以直接 $a==$b 的方式使用) 2) 数组变量array=(1 2 3)|readarray array (数组赋值) ${array[@]}|${array[@]:1:4}|${array[1]} (取所有值|取1-4下标的值|取下标1的值) ${#aray[@]} ${#array[*]} (获取数组长度) array[1]=xx (数组赋值) unset array[1] unset array (清除下标1的数组值) ` 逻辑判断 逻辑判断主要包括条件判断，多分支1)if判断 if []需要空格分离,[]中间也需要空格`if [ $a -eq $b ];then echo $a ;elif [ -f $c ];then echo $c;else echo $b;fi 2)case判断case $opt in $a) xx ;; $b | $c ) xx ;; *) ;; esac ` 循环语句1)for循环for i in $(seq 1 10) | for ((i=0;i&lt;10;i++)) | for i in {1..10} do xx done 2)while循环while :; do xx done 3)until循环count=1 until [[ $count == 10 ]] do let count+=1 done 4)break 和continuebreak n （跳出几层循环，n=2时即会退出2层循环) continue n (中断几层循环，n=2时会中断2层循环重新开始内两层的循环) 脚本内调用其他脚本的方式1)forkfork是最普通的, 就是直接在脚本里面用/directory/script.sh来调用script.sh这个脚本. 运行的时候开一个sub-shell执行调用的脚本，sub-shell执行的时候,parent-shell还在。 sub-shell执行完毕后返回parent-shell. sub-shell从parent-shell继承环境变量. 但是sub-shell中的环境变量不会带回parent-shell 2)exec执行子级的命令后，不再执行父级命令。exec与fork不同，不需要新开一个 sub-shell来执行被调用的脚本. 被调用的脚本与父脚本在同一个shell内执行。 但是使用exec调用一个新脚本以后, 父脚本中exec行之后的内容就不会再执行了。 这是exec和source的区别 3)source执行子级命令后继续执行父级命令，同时子级设置的环境变量会影响到父级的环境变量。 fork的区别是不新开一个sub-shell来执行被调用的脚本，而是在同一个shell中执行. 所以被调用的脚本中声明的变量和环境变量, 都可以在主脚本中得到和使用. 后台运行脚本的几种方式1) nohup2) { }&amp;3) jobs,fg,bg]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搭建说明]]></title>
    <url>%2F2019%2F01%2F13%2Freadme%2F</url>
    <content type="text"><![CDATA[博客使用基于node.js的Hexo和zhwangart的theme，以及github.io和阿里云域名管理搭建完成。 The First Step 拥有Github账号 本地下载Hexo Hexo配置关联Github(yourname.github.io) 1234deploy: type: git repository: git@github.com:duduer/duduer.github.io.git branch: master The Second Step Hexo找个主题 Hexo同步环境文件到Github分支 Hexo插件安装 The Last Step 阿里云免费域名(不知道现在还有没有) 配置域名解析到Github hexo相关操作记录hexo基本操作 hexo目录结构如下： source：存放元数据，以及通过以下命令hexo new page 创建的目录，以及需要在对应的 themes 主题下修改对应的_config.ymlmenu: #Home 首页: / # Archives 读书: /archives public: 发布文件夹，存放发布到Github的静态资源文件路径，使用如下命令操作 hexo g #生成静态文件 hexo d #发布到github上 hexo s #启动本地服务器（http://localhost:4000/） hexo clean #清理生成的静态文件 categories: 分类文件夹，需要支持分类的话，需要在该目录下新建目录，且在_config.yml添加category_map: 代码: code 读书: book themes目录下的languages目录中包含zh-CN.yml，可以将英文title转换中文，且需要在全局配置中添加 language: zh-CNcategories: 分类 code: 代码 book: 读书 search: 搜索 hexo创建page和文章：创建page，page有默认格式支持，但是一个标签只有一个页面hexo new page xx page是否支持分类，需要主题支持，如果不支持，则只能使用categories，默认支持分类，需要修改themes下config.ymlmenu: 读书: /categories/book 创建文章和草稿hexo new xx hexo new draft xx #创建草稿 hexo publish [layout] &lt;filename&gt; #发布成文章 文章参数title: shell #标题 date: 2019-01-21 23:35:09 categories: 代码 #分类，会和category_map中的映射对应。 tags: - shell #标签，可以支持多个 - bash archives: /archives #归档路径 如何在Github分支上保存hexo其他资源，进行备份 Github创建分支 hexo其他需要同步的静态资源 维护更新(注意事项)]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
</search>
