<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新的小窝</title>
  
  <subtitle>闲散惯了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenheng.xyz/"/>
  <updated>2019-02-16T15:09:18.830Z</updated>
  <id>http://chenheng.xyz/</id>
  
  <author>
    <name>ch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql</title>
    <link href="http://chenheng.xyz/2019/02/13/sql/"/>
    <id>http://chenheng.xyz/2019/02/13/sql/</id>
    <published>2019-02-13T13:30:13.000Z</published>
    <updated>2019-02-16T15:09:18.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sql基础语法"><a href="#Sql基础语法" class="headerlink" title="Sql基础语法"></a>Sql基础语法</h3><ul><li>获取数据  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select from  atable as a (inner) join </span><br><span class="line">where (select * from)and (order by) desc</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Sql基础语法&quot;&gt;&lt;a href=&quot;#Sql基础语法&quot; class=&quot;headerlink&quot; title=&quot;Sql基础语法&quot;&gt;&lt;/a&gt;Sql基础语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;获取数据  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="代码" scheme="http://chenheng.xyz/categories/code/"/>
    
    
      <category term="sql" scheme="http://chenheng.xyz/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>shell复习-1 基础内容</title>
    <link href="http://chenheng.xyz/2019/01/22/shell-1/"/>
    <id>http://chenheng.xyz/2019/01/22/shell-1/</id>
    <published>2019-01-22T15:25:40.000Z</published>
    <updated>2019-02-16T15:09:12.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bash-csh-sh等bash解释器区别"><a href="#bash-csh-sh等bash解释器区别" class="headerlink" title="bash,csh,sh等bash解释器区别"></a>bash,csh,sh等bash解释器区别</h3><ul><li>sh(Bourne shell),最老的shell，也是最基础的</li><li>bash(Bourne Again Shell),Linux 默认，shell的扩展版本，包含部分csh和ksh的特性</li><li>csh，语法和c比较类似</li><li><p>tsch，c shell的扩展版本，支持补全，校正等便捷操作<br>-ksh(korn shell),结合csh和bash特点兼容bash</p><a id="more"></a><h3 id="bash基础相关"><a href="#bash基础相关" class="headerlink" title="bash基础相关"></a>bash基础相关</h3></li><li><p>输入相关<br>`</p><pre><code>&lt; filename(文本输入)&lt;&lt; stop(持续输入知道遇到stop)read param(接受控制台读取一个参数)0 (标准输入描述符)</code></pre><p>`</p></li><li>输出相关<br>`<pre><code>&gt; filename(文本输出,覆盖)&gt;&gt; filename(追加到文本文件)2&gt;&amp;1(把错误输出重定向到标准输出)：find xx &gt; test.log 2&gt;&amp;11 (标准输出描述符)2 (错误输出描述符)</code></pre>`</li><li>变量<br>  <strong>可以通过下面知道$ # @ * 这些符号含义在变量中基本是一致的</strong><br>1) 普通变量<br>`<pre><code>var=xx|var=&quot;xx&quot; (赋值)$var|${var}|&quot;$var&quot; (注意单引号会使得$无效,${}可以作为正则表达式)$* $@ $# #? (* 表示所有参数取值,视为一个参数五区段。 @还存在着区段，#为参数数量,?为上个脚本执行结果)$0|$1···(0表示脚本自己，1等表示参数下标,两位书以上需要用{})( ) (类似 · · 和 eval,执行群组指令获取结果，但是()也可用于数组定义)(( )) (类似let，bash内建指令，算术计算){ } (单纯只使用大括号时，作用就像是个没有指定名称的函数一般,另一种用法常用在字串的组合mkdir {userA,userB,userC}-{home,bin,data}会创建两个大括号的正交组合的目录 )[ ] (判断内容，类似test，[ $a -eq $b ],数值 -eq -ne -lt -le -gt -ge,文件 -r -l -w -x -f -e -d -s -nt -ot,字符 = ！= -n -z ,逻辑 -a -o !)[[ ]] (判断，可以直接 $a==$b 的方式使用)</code></pre><code>2) 数组变量</code><pre><code>array=(1 2 3)|readarray array (数组赋值)${array[@]}|${array[@]:1:4}|${array[1]} (取所有值|取1-4下标的值|取下标1的值)${#aray[@]} ${#array[*]} (获取数组长度)array[1]=xx (数组赋值)unset array[1] unset array (清除下标1的数组值)</code></pre>`</li><li>逻辑判断<br>   <strong>逻辑判断主要包括条件判断，多分支</strong><br>1)if判断<br> <em>if []需要空格分离,[]中间也需要空格</em><br>`<pre><code>if [ $a -eq $b ];then echo $a ;elif [ -f $c ];then echo $c;else echo $b;fi</code></pre><code>2)case判断</code><pre><code>case $opt in    $a) xx    ;;    $b | $c ) xx    ;;    *)    ;;esac</code></pre>`</li><li>循环语句<br>1)for循环<pre><code>for i in $(seq 1 10) | for ((i=0;i&lt;10;i++)) | for i in {1..10}doxxdone</code></pre>2)while循环<pre><code>while :;do    xxdone</code></pre>3)until循环<pre><code>count=1until [[ $count == 10 ]]do    let count+=1done</code></pre>4)break 和continue<pre><code>break n （跳出几层循环，n=2时即会退出2层循环)continue n (中断几层循环，n=2时会中断2层循环重新开始内两层的循环)</code></pre></li><li>脚本内调用其他脚本的方式<br>1)fork<pre><code>fork是最普通的, 就是直接在脚本里面用/directory/script.sh来调用script.sh这个脚本. 运行的时候开一个sub-shell执行调用的脚本，sub-shell执行的时候,parent-shell还在。sub-shell执行完毕后返回parent-shell. sub-shell从parent-shell继承环境变量.但是sub-shell中的环境变量不会带回parent-shell</code></pre>2)exec<pre><code>执行子级的命令后，不再执行父级命令。exec与fork不同，不需要新开一个sub-shell来执行被调用的脚本.  被调用的脚本与父脚本在同一个shell内执行。但是使用exec调用一个新脚本以后, 父脚本中exec行之后的内容就不会再执行了。这是exec和source的区别</code></pre>3)source<pre><code>执行子级命令后继续执行父级命令，同时子级设置的环境变量会影响到父级的环境变量。fork的区别是不新开一个sub-shell来执行被调用的脚本，而是在同一个shell中执行. 所以被调用的脚本中声明的变量和环境变量, 都可以在主脚本中得到和使用.</code></pre></li><li>后台运行脚本的几种方式<br>1) nohup<br>2) { }&amp;<br>3) jobs,fg,bg</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;bash-csh-sh等bash解释器区别&quot;&gt;&lt;a href=&quot;#bash-csh-sh等bash解释器区别&quot; class=&quot;headerlink&quot; title=&quot;bash,csh,sh等bash解释器区别&quot;&gt;&lt;/a&gt;bash,csh,sh等bash解释器区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;sh(Bourne shell),最老的shell，也是最基础的&lt;/li&gt;
&lt;li&gt;bash(Bourne Again Shell),Linux 默认，shell的扩展版本，包含部分csh和ksh的特性&lt;/li&gt;
&lt;li&gt;csh，语法和c比较类似&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tsch，c shell的扩展版本，支持补全，校正等便捷操作&lt;br&gt;-ksh(korn shell),结合csh和bash特点兼容bash&lt;/p&gt;
    
    </summary>
    
      <category term="代码" scheme="http://chenheng.xyz/categories/code/"/>
    
    
      <category term="shell" scheme="http://chenheng.xyz/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建说明</title>
    <link href="http://chenheng.xyz/2019/01/13/readme/"/>
    <id>http://chenheng.xyz/2019/01/13/readme/</id>
    <published>2019-01-13T13:29:28.310Z</published>
    <updated>2019-01-22T15:48:12.604Z</updated>
    
    <content type="html"><![CDATA[<p><strong>博客使用基于node.js的<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>和zhwangart的<a href="https://zhwangart.github.io/" target="_blank" rel="noopener">theme</a>，以及<a href="https://github.com/" target="_blank" rel="noopener">github.io</a>和<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>域名管理搭建完成。</strong><br><a id="more"></a></p><h2 id="The-First-Step"><a href="#The-First-Step" class="headerlink" title="The First Step"></a>The First Step</h2><ul><li>拥有Github账号</li><li>本地下载Hexo</li><li>Hexo配置关联Github(yourname.github.io)  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">     repository: git@github.com:duduer/duduer.github.io.git</span><br><span class="line">     branch: master</span><br></pre></td></tr></table></figure></li></ul><h2 id="The-Second-Step"><a href="#The-Second-Step" class="headerlink" title="The Second Step"></a>The Second Step</h2><ul><li>Hexo找个<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></li><li>Hexo同步环境文件到Github分支</li><li>Hexo插件安装</li></ul><h2 id="The-Last-Step"><a href="#The-Last-Step" class="headerlink" title="The Last Step"></a>The Last Step</h2><ul><li>阿里云免费域名(不知道现在还有没有)</li><li>配置域名解析到Github</li></ul><h2 id="hexo相关操作记录"><a href="#hexo相关操作记录" class="headerlink" title="hexo相关操作记录"></a>hexo相关操作记录</h2><h4 id="hexo基本操作"><a href="#hexo基本操作" class="headerlink" title="hexo基本操作"></a>hexo基本操作</h4><ul><li>hexo目录结构如下：<br>  <em>source：存放元数据，以及通过以下命令</em><pre><code>hexo new page</code></pre>  <em>创建的目录，以及需要在对应的 themes 主题下修改对应的_config.yml</em><pre><code>menu:  #Home    首页: /  # Archives    读书: /archives</code></pre><em>public: 发布文件夹，存放发布到Github的静态资源文件路径，使用如下命令操作</em><pre><code>    hexo g #生成静态文件    hexo d #发布到github上    hexo s #启动本地服务器（http://localhost:4000/）hexo clean #清理生成的静态文件</code></pre><em>categories: 分类文件夹，需要支持分类的话，需要在该目录下新建目录，且在_config.yml添加</em><pre><code>category_map:  代码: code  读书: book</code></pre><em>themes目录下的languages目录中包含zh-CN.yml，可以将英文title转换中文，且需要在全局配置中添加 language: zh-CN</em><pre><code>categories: 分类code: 代码book: 读书search: 搜索</code></pre></li><li>hexo创建page和文章：<br><em>创建page，page有默认格式支持，但是一个标签只有一个页面</em><pre><code>hexo new page xx</code></pre><em>page是否支持分类，需要主题支持，如果不支持，则只能使用categories，默认支持分类，需要修改themes下config.yml</em><pre><code>menu:  读书: /categories/book</code></pre><em>创建文章和草稿</em><pre><code>hexo new xxhexo new draft xx #创建草稿hexo publish [layout] &lt;filename&gt; #发布成文章</code></pre><em>文章参数</em><pre><code>title: shell #标题date: 2019-01-21 23:35:09categories: 代码 #分类，会和category_map中的映射对应。tags:   - shell #标签，可以支持多个  - basharchives: /archives #归档路径</code></pre></li></ul><h3 id="如何在Github分支上保存hexo其他资源，进行备份"><a href="#如何在Github分支上保存hexo其他资源，进行备份" class="headerlink" title="如何在Github分支上保存hexo其他资源，进行备份"></a>如何在Github分支上保存hexo其他资源，进行备份</h3><ul><li>Github创建分支</li><li>hexo其他需要同步的静态资源</li><li>维护更新(注意事项)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;博客使用基于node.js的&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;和zhwangart的&lt;a href=&quot;https://zhwangart.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;theme&lt;/a&gt;，以及&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github.io&lt;/a&gt;和&lt;a href=&quot;https://cn.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云&lt;/a&gt;域名管理搭建完成。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="about" scheme="http://chenheng.xyz/tags/about/"/>
    
  </entry>
  
</feed>
